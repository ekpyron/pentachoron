#version 420 core
layout(location = 0) out vec3 diffuse;
layout(location = 1) out vec3 specular;
layout(binding = 0) uniform sampler2D normalbuffer;
layout(binding = 2) uniform sampler2D shadowmask;
layout(binding = 3) uniform sampler2D specularbuffer;

struct Light
{
	vec3 position;
	vec3 color;
	vec3 direction;
	float spotCosCutOff;
	float spotExponent;
	vec3 specularColor;
	float shininess;
	/* attenuation.x: constant attenuation
	 * attenuation.y: linear attenuation
	 * attenuation.z: quadratic attenuation
	 */
	vec3 attenuation;
};

uniform Light light;
uniform uvec2 viewport;
uniform bool castshadow;

uniform vec3 eye;

/* reconstructs object space coordinates
 * from depth and w information */
vec3 GetPos (in vec2 coord);

void main (void)
{
	vec3 normal;
	vec3 pos;
	vec2 coord;

	coord = gl_FragCoord.xy / viewport;

	pos = GetPos (coord);

// attenuation
	vec3 lightDir = light.position - pos;
	float dist;
	dist = length (lightDir);
	lightDir /= dist;
	float attenuation = 1 / (light.attenuation.x
			    + light.attenuation.y * dist
			    + light.attenuation.z * dist * dist);
	if (attenuation < 0.001)
	   discard;

	if (castshadow)
	{
	   attenuation *= texture2D (shadowmask, coord).r;
	   if (attenuation < 0.001)
	      discard;
	}

// spot light effect
	float spotEffect = 0;
	spotEffect = dot (normalize (light.direction),
		          -lightDir);
	if (spotEffect > light.spotCosCutOff)
	{
		spotEffect = pow (spotEffect, light.spotExponent);
	}
	else
	{
		discard;
	}
	attenuation *= spotEffect;
	if (attenuation < 0.001)
	   discard;

// diffuse lighting
	normal = texture2D (normalbuffer, coord).xyz * 2 - 1;
	float NdotL;
	NdotL = max (dot (normal, lightDir), 0);

// computing diffuse light
	diffuse = light.color * attenuation * NdotL;

// specular lighting

	specular = texture2D (specularbuffer, coord).rgb;
	if (specular.r > 0.001 || specular.g > 0.001 || specular.b > 0.001)
	{
		float reflection;
		reflection = dot (normalize (eye - pos),
			     	  reflect (normalize (pos - light.position),
			     	       	   normal));

		specular *= attenuation *  light.specularColor
			    * pow (reflection, light.shininess);
	}
}
