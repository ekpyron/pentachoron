/*  
 * This file is part of DRE.
 *
 * DRE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DRE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DRE.  If not, see <http://www.gnu.org/licenses/>.
 */
#version 420 core

layout(location = 0) out vec4 screen;
layout(location = 1) out vec4 glowmap;

layout(binding = 0) uniform sampler2D colorbuffer;
layout(binding = 1) uniform sampler2D depthbuffer;
layout(binding = 2) uniform sampler2D normalbuffer;
layout(binding = 3) uniform sampler2D specularbuffer;
layout(binding = 4) uniform sampler2D shadowmap;
layout(binding = 5) uniform isampler2D fragidx;
layout(binding = 6) uniform usamplerBuffer fraglist;
layout(binding = 7) uniform samplerBuffer lightbuffertex;
layout(binding = 8) uniform usampler2D lighttex;
layout(binding = 9) uniform samplerBuffer parametertex;

layout (binding = 0) uniform atomic_uint counter[768];

const float PI = 3.14159265358979323846f;
const vec3 luminance_factor = vec3 (0.2126, 0.7152, 0.0722);

#define DEPTHLAYERS 8

uniform vec2 invviewport;

struct PixelData {
       vec4 color;
       vec4 specular;
       vec4 normal;
       float depth;
};

#define SIZEOF_PARAMETER 1

struct Parameter {
	unsigned int model;
	float param1;
	float param2;
	float reflect;
};

struct Light {
       vec4 pos;
       vec4 color;
       vec4 dir;
       vec4 spot, spot2;
       vec4 specular;
       vec4 attenuation;
};

uniform struct {
	float threshold;
} glow;

uniform struct {
	float theta;
	float cos_theta;
	vec3 direction;
} sun;

uniform struct {
	float perezY[5];
	float perezx[5];
	float perezy[5];
	vec3 zenithYxy;
} sky;

uniform float screenlimit;
uniform float shadow_alpha;

uniform vec3 eye;

uniform vec4 projinfo;
uniform mat4 vmatinv;
uniform mat4 shadowmat;

void read_parameter (out struct Parameter param, in int offset)
{
	vec4 tmp;
	tmp = texelFetch (parametertex, offset);
	param.model = floatBitsToUint (tmp.x);
	param.param1 = tmp.y;
	param.param2 = tmp.z;
	param.reflect = tmp.w;
}

void read_light (out struct Light light, in uint id)
{
	int offset;

	ivec2 p;
	p.x = int (gl_FragCoord.x) & (~0x1F);
	p.y = int (gl_FragCoord.y) & (~0x1F);
	p.x += int (id) & 0x1F;
	p.y += int (id) >> 5;
	offset = int (texelFetch (lighttex, p, 0).r) * 13;

	light.pos = texelFetch (lightbuffertex, offset);
	light.color = texelFetch (lightbuffertex, offset + 1);
	light.dir = texelFetch (lightbuffertex, offset + 2);
	light.spot = texelFetch (lightbuffertex, offset + 3);
	light.spot2 = texelFetch (lightbuffertex, offset + 4);
	light.specular = texelFetch (lightbuffertex, offset + 5);
	light.attenuation = texelFetch (lightbuffertex,
			    	        offset + 12);
}

vec3 getpos (in vec3 pin)
{
	vec4 pos;
	pos.xyz = pin * 2 - 1;
	pos.w = 1;

	vec4 p;
	p.x = pos.x * projinfo.x;
	p.y = pos.y * projinfo.y;
	p.z = -pos.w;
	p.w = (pos.z * (projinfo.z - projinfo.w)
	      + pos.w * (projinfo.z + projinfo.w))
	      / (2 * projinfo.z * projinfo.w);
	pos = vmatinv * p;
	return pos.xyz / pos.w;
}


vec3 getskypos (in vec3 pin)
{
	vec4 pos;
	pos.xyz = pin * 2 - 1;
	pos.w = 1;

	vec4 p;
	p.x = pos.x * projinfo.x;
	p.y = pos.y * projinfo.y;
	p.z = -pos.w;
	p.w = (pos.z * (projinfo.z - projinfo.w)
	      + pos.w * (projinfo.z + projinfo.w))
	      / (2 * projinfo.z * projinfo.w);
	pos = mat4 (mat3 (vmatinv)) * p;
	return pos.xyz / pos.w;
}

float compute_shadow (in vec3 pos)
{
	vec4 lspos;

	lspos = shadowmat * vec4 (pos, 1);
	lspos.xyz /= lspos.w;

	if (lspos.w < 0 || lspos.x < 0 || lspos.y < 0
	    || lspos.x > 1 || lspos.y > 1)
	{
		return 1.0f;
	}

	vec2 moments = texture (shadowmap, lspos.xy).xy;


	if (lspos.z <= moments.x)
	{
	   return 1.0f;
	}

	float variance = moments.y - (moments.x * moments.x);
	variance = max (variance, 0.00001f);
	float d = lspos.z - moments.x;
	float p = variance / (variance + d * d);
	return smoothstep (0.1f, 1.0f, p);
}

float specular_gaussian (in struct Parameter param,
      			 in vec3 normal, in vec3 halfvec)
{
	float e;
	e = acos (dot (normal, halfvec));
	e = clamp (e, 0.0f, 1.0f) / param.param1;
	return param.param2 * exp (-e * e);
}

float specular_phong (in struct Parameter param,
      		      in vec3 viewdir, in vec3 lightdir,
		      in vec3 normal)
{
	float k;
	k = dot (viewdir, reflect (-lightdir, normal));
	k = clamp (k, 0.0f, 1.0f);
	k = pow (k, param.param1);
	return k;
}

float specular_beckmann (in struct Parameter param,
      		        in vec3 normal, in vec3 halfvec)
{
	float e, m;
	e = acos (dot (normal, halfvec));
	e = cos (clamp (e, 0.0f, 1.0f));
	e = e * e;
	m = param.param1;
	m = m * m;

	return exp (-(1 - e) / (e * m)) / (PI * m * e * e);
}

float specular_cooktorrance (in struct Parameter param,
      			     in vec3 viewdir, in vec3 lightdir,
      			     in vec3 normal, in vec3 halfvec)
{
	float fresnel = param.param2;
	float k;

	k = specular_beckmann (param, normal, halfvec);

	float NdotH, VdotH, NdotV, NdotL;

	NdotH = dot (normal, halfvec);
	VdotH = dot (viewdir, halfvec);
	NdotV = dot (normal, viewdir);
	NdotL = dot (normal, lightdir);

	float f;
	f = fresnel + pow (1 - NdotV, 5) * (1 - fresnel);
	float g, g1, g2;
	g1 = (2 * NdotH * NdotV) / VdotH;
	g2 = (2 * NdotH * NdotL) / VdotH;
	g = min (1.0f, min (g1, g2));

	return k * f * g / NdotV;
}

float perez (in float cos_theta, in float gamma, in float cos_gamma,
      	     in float c[5])
{
	return (1 + c[0] * exp (c[1] / cos_theta))
	       * (1 + c[2] * exp (c[3] * gamma)
	       	  + c[4] * cos_gamma * cos_gamma);
}

vec3 Yxy2RGB (in vec3 Yxy)
{
	vec3 XYZ;

	XYZ.x = Yxy.x * Yxy.y / Yxy.z;
	XYZ.y = Yxy.x;
	XYZ.z = Yxy.x * (1 - Yxy.y - Yxy.z) / Yxy.z;
	return mat3 (3.2404790f, -0.969256f, 0.0055648f,
	       	     -1.537150f, 1.875992f, -0.204043f,
		     -0.498535f, 0.041556f, 1.057311f) * XYZ;
}

vec3 compute_sky (in vec3 dir)
{
	vec3 sundir;

	sundir = sun.direction;

	float theta_s = sun.theta;
	float cos_theta_s = sun.cos_theta;

	float cos_theta = dir.y;
	float theta = acos (cos_theta);
	cos_theta = abs (cos_theta);

	float cos_gamma = dot (sundir, dir);
	float gamma = acos (cos_gamma);

	vec3 Yxy;

	Yxy.x = 0.04f * sky.zenithYxy.x
	        * perez (cos_theta, gamma, cos_gamma,
		  	 sky.perezY)
		/ perez (1, theta_s, cos_theta_s,
		  	 sky.perezY);
	Yxy.y = sky.zenithYxy.y
	        * perez (cos_theta, gamma, cos_gamma,
		  	 sky.perezx)
		/ perez (1, theta_s, cos_theta_s,
		  	 sky.perezx);
	Yxy.z = sky.zenithYxy.z
	        * perez (cos_theta, gamma, cos_gamma,
		  	 sky.perezy)
		/ perez (1, theta_s, cos_theta_s,
		  	 sky.perezy);

	if (cos_gamma > 0.999f)
	{
	   Yxy.x *= 1 + (cos_gamma - 0.999f) * 10000.0f;
	}

	return Yxy2RGB (Yxy);
}

uint GetNumLights (void)
{
	ivec2 c = ivec2 (int (gl_FragCoord.x) >> 5,
	      	  	 int (gl_FragCoord.y) >> 5);
	return atomicCounter (counter[32 * c.y + c.x]);
}

vec4 compute_pixel (in struct PixelData data)
{
	uint num_lights;
	vec3 pos;
	vec3 normal;
	vec3 diffuse = vec3 (0, 0, 0);
	vec3 specular = vec3 (0, 0, 0);
	vec4 pixel;
	vec3 viewdir;

	if (data.depth == 1.0f)
	{
		vec3 dir;
		dir = normalize (getskypos (vec3 (invviewport * gl_FragCoord.xy,
	      			    	    data.depth)));
		return vec4 (compute_sky (dir), 1.0f);
	}

	struct Parameter param;
	read_parameter (param, int (data.specular.w * 255.0f)
		       * SIZEOF_PARAMETER);

	pos = getpos (vec3 (invviewport * gl_FragCoord.xy, data.depth));
	normal = normalize (data.normal.xyz * 2 - 1);

	viewdir = normalize (eye - pos);

	{
		vec3 skynormal = compute_sky (normal);
		diffuse = dot (skynormal, luminance_factor)
			  * vec3 (1, 1, 1);
		vec3 lightdir = normalize (sun.direction);
		vec3 halfvec = normalize (viewdir + lightdir);

		float s = 0.0f;
		switch (param.model)
		{
			case 1:
			     s = specular_gaussian (param, normal, halfvec);
			break;
			case 2:
			     s = specular_phong (param, viewdir, lightdir,
			       	 		 normal);
			break;
			case 3:
			     s = specular_beckmann (param, normal, halfvec);
			break;
			case 4:
			     s = specular_cooktorrance (param, viewdir,
			       	 		        lightdir, normal,
							halfvec);
			break;
			default:
			break;
		}

		specular = s * skynormal;
	}

	num_lights = GetNumLights ();

	for (uint i = 0; i < num_lights; i++)
	{
		struct Light light;
		read_light (light, i);

		vec3 lightdir = light.pos.xyz - pos.xyz;

		float dist = length (lightdir);

		if (dist > light.attenuation.w)
		   continue;
		
		lightdir /= dist;

		float attenuation;
		attenuation = 1.0 / (light.attenuation.x
			      	     + dist * light.attenuation.y
				     + dist * dist * light.attenuation.z);

		float angle = dot (normalize (light.dir.xyz),
		      	      	   -lightdir);

		if (angle < light.spot.x)
		   continue;

		if (angle < light.spot2.y)
		{
			attenuation *= (angle - light.spot.x)
				       / (light.spot2.y - light.spot.x);
		}

		attenuation *= pow (angle, light.spot.y);

		float NdotL;
		NdotL = max (dot (normal, lightdir), 0.0);

		diffuse += NdotL * attenuation * light.color.xyz;

		vec3 halfvec = normalize (viewdir + lightdir);

		float s = 0.0f;
		switch (param.model)
		{
			case 1:
			     s = specular_gaussian (param, normal, halfvec);
			break;
			case 2:
			     s = specular_phong (param, viewdir, lightdir,
			       	 		 normal);
			break;
			case 3:
			     s = specular_beckmann (param, normal, halfvec);
			break;
			case 4:
			     s = specular_cooktorrance (param, viewdir,
			       	 		        lightdir, normal,
							halfvec);
			break;
			default:
			break;
		}
		specular += attenuation * s * light.specular.xyz;
	}

	specular *= data.specular.xyz;

	pixel = vec4 (data.color.xyz * diffuse, data.color.w); 
	pixel.xyz += specular * data.specular.xyz;

	if (param.reflect > 0)
	{
		float f;
		f = dot (-viewdir, normal);
		if (f < 0) f = -f;
		f = mix (pow (1 - f, 5), 1, param.reflect);
		f = clamp (f, 0.1f, 0.9f);
		vec3 refl = compute_sky (reflect (-viewdir, normal));
		pixel.xyz =  mix (pixel.xyz, refl, f);
	}

	float shadow = mix (1.0, compute_shadow (pos), shadow_alpha);
	pixel *= shadow;

	return pixel;
}

void main (void)
{
	struct PixelData data;
	vec4 pixel;
	vec2 coord = invviewport * gl_FragCoord.xy;

	int idx = texture (fragidx, coord).r;
	uint num = 0;
	uint indices[DEPTHLAYERS];

	while (idx != -1)
	{
		float d = uintBitsToFloat (texelFetch (fraglist,
		      	  		  	       idx * 5 + 3).r);
		if (num < DEPTHLAYERS)
		{
		   num++;
		}
		else if (uintBitsToFloat (texelFetch
		     		(fraglist, int (indices[num - 1] * 5 + 3)).r)
				<= d)
		{
			idx = int (texelFetch (fraglist, 5 * idx + 4).r);
			continue;
		}

		uint i = num - 1;
		while (i > 0)
		{
			if (d >= uintBitsToFloat (texelFetch
		      	     	 (fraglist, int (indices[i - 1] * 5 + 3)).r))
				 break;
			indices[i] = indices[i - 1];
			i--;
		}
		indices[i] = idx;
		idx = int (texelFetch (fraglist, idx * 5 + 4).r);
	}

	data.color = texture (colorbuffer, coord);
	data.specular = texture (specularbuffer, coord);
	data.normal = texture (normalbuffer, coord);
	data.depth = texture (depthbuffer, coord).r;
	pixel = compute_pixel (data);

	for (uint i = 0; i < num; i++)
	{
		vec4 tmp;
		idx = int (indices[i]);
		data.color = unpackUnorm4x8 (texelFetch (fraglist,
			     		    		 idx * 5 + 0).r);
		data.specular = unpackUnorm4x8 (texelFetch (fraglist,
			     		    		    idx * 5 + 1).r);
		data.normal = unpackUnorm4x8 (texelFetch (fraglist,
			     		    		  idx * 5 + 2).r);
		data.depth = uintBitsToFloat (texelFetch (fraglist,
			     		    		  idx * 5 + 3).r);
		tmp = compute_pixel (data);
		pixel = mix (pixel, tmp, tmp.w);
	}

	pixel = clamp (pixel, 0, screenlimit);
	screen = pixel;

	if (dot (pixel.xyz, luminance_factor) > glow.threshold)
	{
		glowmap = pixel;
	}
	else
	{
		glowmap = vec4 (0, 0, 0, 0);
	}
}
