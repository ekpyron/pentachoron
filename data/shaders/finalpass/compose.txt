#version 420 core
layout(location = 0) out vec4 output;
layout(binding = 0) uniform sampler2D colorbuffer;
layout(binding = 1) uniform sampler2D glowbuffer;
uniform uvec2 viewport;
uniform struct
{
	float image_key;
	float white_threshold;
	mat3x3 RGB2XYZ;
	mat3x3 XYZ2RGB;
	unsigned int mode;
	float sigma;
	float n;
} tonemapping;

float luminance (vec4 color)
{
	return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}

void main (void)
{
	vec4 color, glow;
	vec2 coord = gl_FragCoord.xy / viewport;
	color = texture (colorbuffer, coord);
	glow = texture (glowbuffer, coord, 2);
	color.xyz += glow.xyz;

/*	const mat3x3 RGB2XYZ = mat3x3 (0.5141364, 0.3238786,  0.16036376,					       0.265068,  0.67023428, 0.06409157,
                               	       0.0241188, 0.1228178,  0.84442666);
	const mat3x3 XYZ2RGB = mat3x3 (2.5651,-1.1665,-0.3986,
                               	      -1.0217, 1.9777, 0.0439, 
                               	       0.0753, -0.2543, 1.1892);

*/				       

	float avgLuminance = 0.5;
//luminance (texture (colorbuffer, coord, 10));

	float exposure = tonemapping.image_key / avgLuminance;

	vec3 XYZ;

	XYZ = tonemapping.RGB2XYZ * color.xyz;

	vec3 Yxy;
	Yxy.r = XYZ.g;
	Yxy.g = XYZ.r / (XYZ.r + XYZ.g + XYZ.b);
	Yxy.b = XYZ.g / (XYZ.r + XYZ.g + XYZ.b);

	float Lp = Yxy.r * exposure / avgLuminance;

	Lp = pow (Lp, tonemapping.n);

	switch (tonemapping.mode)
	{
		case 0:
		     Yxy.r = (Lp * (1.0f + Lp
		     	     / (tonemapping.white_threshold
			        * tonemapping.white_threshold)))
	      		     / (tonemapping.sigma + Lp);

		break;
		case 1:
		     Yxy.r = log (1 + Lp)
		     	     / log (1 + tonemapping.white_threshold);
		break;
		case 2:
		     Yxy.r = tonemapping.sigma * Lp
		     	     / (tonemapping.sigma * Lp - Lp
			        + tonemapping.white_threshold);
		break;
		case 3:
		     Yxy.r = 1 - exp (-Lp);
		break;
	}

	XYZ.r = Yxy.r * Yxy.g / Yxy.b;
	XYZ.g = Yxy.r;
	XYZ.b = Yxy.r * (1 - Yxy.g - Yxy.b) / Yxy.b;

	color.xyz = tonemapping.XYZ2RGB * XYZ;
	color.w = 1.0;

	output = color;
}
