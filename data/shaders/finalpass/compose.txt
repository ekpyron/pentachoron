#version 420 core
layout(location = 0) out vec4 output;
layout(binding = 0) uniform sampler2D screenmap;
layout(binding = 1) uniform sampler2DMS msdepthmap;
layout(binding = 2) uniform sampler2D depthmap;
layout(binding = 3) uniform sampler2D luminancemap;

uniform uvec2 viewport;
uniform uvec2 gbufferdim;
uniform uint antialiasing;
uniform bool glow;
uniform float farClipPlane;
uniform float nearClipPlane;
layout(row_major) uniform;
layout(std140, binding=0) uniform Tonemapping
{
	struct
	{
		mat3x3 RGB2XYZ;
		mat3x3 XYZ2RGB;
		float image_key;
		float white_threshold;
		float sigma;
		float n;
	} tonemapping;
	struct
	{
		float constant;
		float linear;
		float lod;
	} avgLum;
};

subroutine float tonemapType (float Lp);
subroutine uniform tonemapType tonemapOperator;

float getAvgLuminance (void)
{
	vec2 coord = gl_FragCoord.xy / viewport;
	float luminance;
	luminance = exp (texture (luminancemap, coord, avgLum.lod).r);
	return avgLum.constant + avgLum.linear * luminance;
}

vec3 RGB2Yxy (vec3 color)
{
	vec3 XYZ;

	XYZ = tonemapping.RGB2XYZ * color;

	vec3 Yxy;
	Yxy.r = XYZ.g;
	Yxy.g = XYZ.r / (XYZ.r + XYZ.g + XYZ.b);
	Yxy.b = XYZ.g / (XYZ.r + XYZ.g + XYZ.b);
	return Yxy;
}

vec3 Yxy2RGB (vec3 Yxy)
{
	vec3 XYZ;
	XYZ.r = Yxy.r * Yxy.g / Yxy.b;
	XYZ.g = Yxy.r;
	XYZ.b = Yxy.r * (1 - Yxy.g - Yxy.b) / Yxy.b;

	return tonemapping.XYZ2RGB * XYZ;
}

subroutine (tonemapType) float tonemapDefault (float Lp)
{
	return Lp;
}

subroutine (tonemapType) float tonemapReinhard (float Lp)
{
	return (Lp * (1.0f + Lp
     	       / (tonemapping.white_threshold
	       	  * tonemapping.white_threshold)))
		  / (tonemapping.sigma + Lp);
}

subroutine (tonemapType) float tonemapLogarithmic (float Lp)
{
	return log (1 + Lp)
	       / log (1 + tonemapping.white_threshold);
}

subroutine (tonemapType) float tonemapURQ (float Lp)
{
	return tonemapping.sigma * Lp
	       / (tonemapping.sigma * Lp - Lp
	       	  + tonemapping.white_threshold);
}

subroutine (tonemapType) float tonemapExponential (float Lp)
{
        return 1 - exp (-Lp);
}

subroutine (tonemapType) float tonemapDrago (float Lp)
{
	//  TODO: this is not right so far
	float l;
	// maximum luminance capability of the displayin medium
	const float Ldmax = 200;
	l = 0.01 * Ldmax;
	l /= log (tonemapping.white_threshold + 1) / log (10);
	l *= log (Lp + 1);
	l /= log (2 + (pow (Lp / tonemapping.white_threshold,
	     	      	    log (tonemapping.sigma) / log (0.5))) * 8);
	return l;
}

vec4 tonemap (vec4 color)
{
	float avgLuminance = getAvgLuminance ();
	float exposure = tonemapping.image_key / avgLuminance;
	vec3 Yxy;
	Yxy = RGB2Yxy (color.xyz);
	float Lp = Yxy.r * exposure / avgLuminance;
	Lp = pow (Lp, tonemapping.n);
	Yxy.r = tonemapOperator (Lp);
	return vec4 (Yxy2RGB (Yxy), 1.0);
}

void main (void)
{
	vec4 color;
	vec2 coord = gl_FragCoord.xy / viewport;

	if (antialiasing > 0)
	{
		ivec2 p = ivec2 (coord * gbufferdim);

		float weights[9] = { 0, 0, 0,
		      		     0, 0, 0,
				     0, 0, 0 };
		float depths[9];
		for (int y = 0; y < 3; y++)
		{
			for (int x = 0; x < 3; x++)
			{
				depths[y * 3 + x] = texelFetch (depthmap,
				   p + ivec2 (x - 1, y - 1), 0).r;
			}
		}
		for (int s = 0; s < antialiasing; s++)
		{
			float depth;
			depth = texelFetch (msdepthmap, p, s).r;
			float tmpweights[9] = { 0, 0, 0,
			      		      	0, 0, 0,
						0, 0, 0 };
			float sum = 0.0f;
			for (int i = 0; i < 9; i++)
			{
				float w = exp (-500 * abs (depth - depths[i]));
				tmpweights[i] = w;
				sum += w;
			}
			for (int i = 0; i < 9; i++)
			{
				weights[i] += tmpweights[i] / sum;
			}
		}

		color = vec4 (0, 0, 0, 0);
		for (int y = 0; y < 3; y++)
		{
			for (int x = 0; x < 3; x++)
			{
				color += weights[x + y * 3]
				* texture (screenmap, coord
			  	    + vec2 (x - 1, y - 1) / gbufferdim)
				/ antialiasing;
			}
		}
	}
	else
	{
		color = texture (screenmap, coord);
	}

	output = tonemap (color);
}
