#version 420 core
layout(location = 0) out vec4 output;
layout(binding = 0) uniform sampler2D colorbuffer;
layout(binding = 1) uniform sampler2D glowbuffer;
layout(binding = 2) uniform sampler2D depthmap;
uniform uvec2 viewport;
uniform bool glow;
uniform float farClipPlane;
uniform float nearClipPlane;
uniform struct
{
	float image_key;
	float white_threshold;
	mat3x3 RGB2XYZ;
	mat3x3 XYZ2RGB;
	unsigned int mode;
	float sigma;
	float n;
} tonemapping;

float luminance (vec3 color)
{
	return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}

float getdepth (vec2 coord)
{
	return 2.0 * nearClipPlane / (farClipPlane + nearClipPlane -
	       texture (depthmap, coord).r * (farClipPlane - nearClipPlane));
}

vec4 tonemap (vec4 color)
{
	if (tonemapping.mode == 0)
	   return color;

	float avgLuminance = 0.5;

	float exposure = tonemapping.image_key / avgLuminance;

	vec3 XYZ;

	XYZ = tonemapping.RGB2XYZ * color.xyz;

	vec3 Yxy;
	Yxy.r = XYZ.g;
	Yxy.g = XYZ.r / (XYZ.r + XYZ.g + XYZ.b);
	Yxy.b = XYZ.g / (XYZ.r + XYZ.g + XYZ.b);

	float Lp = Yxy.r * exposure / avgLuminance;

	Lp = pow (Lp, tonemapping.n);

	switch (tonemapping.mode)
	{
		case 1:
		     Yxy.r = (Lp * (1.0f + Lp
		     	     / (tonemapping.white_threshold
			        * tonemapping.white_threshold)))
	      		     / (tonemapping.sigma + Lp);

		break;
		case 2:
		     Yxy.r = log (1 + Lp)
		     	     / log (1 + tonemapping.white_threshold);
		break;
		case 3:
		     Yxy.r = tonemapping.sigma * Lp
		     	     / (tonemapping.sigma * Lp - Lp
			        + tonemapping.white_threshold);
		break;
		case 4:
		     Yxy.r = 1 - exp (-Lp);
		break;
	}

	XYZ.r = Yxy.r * Yxy.g / Yxy.b;
	XYZ.g = Yxy.r;
	XYZ.b = Yxy.r * (1 - Yxy.g - Yxy.b) / Yxy.b;

	return vec4 (tonemapping.XYZ2RGB * XYZ, 1.0);
}

void main (void)
{
	vec4 color;
	float edge;
	vec2 coord = gl_FragCoord.xy / viewport;
	color = texture (colorbuffer, coord);

	if (glow)
	{
		color.xyz += texture (glowbuffer, coord).xyz;
	}

	output = tonemap (color);
}
