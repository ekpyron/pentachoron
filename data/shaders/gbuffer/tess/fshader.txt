/*  
 * This file is part of DRE.
 *
 * DRE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DRE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DRE.  If not, see <http://www.gnu.org/licenses/>.
 */
#version 420 core

layout(location = 0) out vec4 color;
layout(location = 1) out vec4 normal;
layout(location = 2) out vec4 specular;

layout(binding = 0) uniform sampler2D diffusemap;
layout(binding = 1) uniform sampler2D normalmap;
layout(binding = 2) uniform sampler2D specularmap;
layout(binding = 3) uniform sampler2D parametermap;
uniform bool diffuse_enabled;
uniform bool normalmap_enabled;
uniform bool specularmap_enabled;
uniform bool parametermap_enabled;
uniform uvec2 viewport;

layout (early_fragment_tests) in;

in vec2 fTexcoord;

smooth in vec3 fTangent;
smooth in vec3 fBitangent;
smooth in vec3 fNormal;

uniform mat3 normalmat;

void main (void)
{
	if (diffuse_enabled)
		color = texture2D (diffusemap, fTexcoord);
	else
		color = vec4 (1.0, 1.0, 1.0, 1.0);

	if (specularmap_enabled)
		specular.xyz = texture2D (specularmap, fTexcoord).xyz;
	else
		specular.xyz = color.xyz;

	if (normalmap_enabled)
	{
		vec3 n;
		mat3x3 tangentmat;
		tangentmat = mat3x3 (fTangent, fBitangent, fNormal);

		n.xy = texture2D (normalmap, fTexcoord * 16).xy * 2.0 - 1.0;
		n.z = sqrt (1.0 - n.x * n.x - n.y * n.y);
		normal.xyz = (normalmat * tangentmat * n) * 0.5 + 0.5;
	}
	else
	{
		normal.xyz = normalmat * fNormal * 0.5 + 0.5;
	}

	if (parametermap_enabled)
	{
		specular.w = texture2D (parametermap, fTexcoord).r;
	}
	else
	{
		specular.w = 0;
	}
}
