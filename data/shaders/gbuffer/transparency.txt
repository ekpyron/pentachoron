#version 420 core

layout(binding = 0, size1x32) writeonly uniform uimageBuffer fraglist;
layout(binding = 1, size1x32) uniform uimage2D fragidx;

layout(binding = 0) uniform atomic_uint counter;

layout(binding = 0) uniform sampler2D diffusemap;
layout(binding = 1) uniform sampler2D normalmap;
layout(binding = 2) uniform sampler2D specularmap;
layout(binding = 3) uniform sampler2D parametermap;

uniform bool diffuse_enabled;
uniform bool normalmap_enabled;
uniform bool specularmap_enabled;
uniform bool parametermap_enabled;
uniform uvec2 viewport;
in vec2 uv;

smooth in vec3 fTangent;
smooth in vec3 fBinormal;
smooth in vec3 fNormal;

const float small = 0.0000001;

layout (early_fragment_tests) in;

void main (void)
{
	vec4 color, specular, normal;
	uint depth;
	ivec2 p = ivec2 (gl_FragCoord.xy);

	if (diffuse_enabled)
		color = texture2D (diffusemap, uv);
	else
		color = vec4 (1.0, 1.0, 1.0, 1.0);

	if (specularmap_enabled)
		specular.xyz = texture2D (specularmap, uv).xyz;
	else
		specular.xyz = vec3 (0.0, 0.0, 0.0);

	if (normalmap_enabled)
	{
		vec3 n;
		mat3x3 tangentmat;
		tangentmat = mat3x3 (fTangent, fBinormal, fNormal);

		n.xy = texture2D (normalmap, uv).xy * 2.0 - 1.0;
		n.z = sqrt (1.0 - n.x * n.x - n.y * n.y);
		normal.xyz = (tangentmat * n) * 0.5 + 0.5;
	}
	else
	{
		normal.xyz = fNormal * 0.5 + 0.5;
	}

	if (parametermap_enabled)
	{
		specular.w = texture2D (parametermap, uv).r;
	}
	else
	{
		specular.w = 0;
	}

	depth = floatBitsToUint (gl_FragCoord.z);

	int idx = int (atomicCounterIncrement (counter));

	uint next = imageAtomicExchange (fragidx, p, idx);

	imageStore (fraglist, idx * 5 + 0, uvec4 (packUnorm4x8 (color)));
	imageStore (fraglist, idx * 5 + 1, uvec4 (packUnorm4x8 (specular)));
	imageStore (fraglist, idx * 5 + 2, uvec4 (packUnorm4x8 (normal)));
	imageStore (fraglist, idx * 5 + 3, uvec4 (depth));
	imageStore (fraglist, idx * 5 + 4, uvec4 (next));
}
