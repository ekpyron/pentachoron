/*  
 * This file is part of pentachoron.
 *
 * pentachoron is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * pentachoron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with pentachoron.  If not, see <http://www.gnu.org/licenses/>.
 */
/* #version 430 core [specified externally] */
/*
 * external definitions:
 * GBUFFER_WIDTH
 * GBUFFER_HEIGHT
 */

uniform vec2 invviewport;

layout(binding = 0) uniform sampler2D depthbuffer;

readonly layout (std430, binding = 3) buffer FragmentIndex {
       int fragindices[];
};

struct Fragment {
       uint color;
       uint specular;
       uint normal;
       float depth;
       int next;
};

readonly layout (std430, binding = 4) buffer FragmentList {
       struct Fragment fragments[];
};

uniform uvec2 offset;

layout(location = 0) out float mindepth;
layout(location = 1) out float maxdepth;

void main (void)
{
	vec2 coord;
	float mind, maxd, depth;

	coord = invviewport * (32 * ivec2 (gl_FragCoord.xy) + offset);
	depth = texture (depthbuffer, coord).r;
	mind = depth;
	maxd = depth;
	int idx = fragindices[(int (gl_FragCoord.y) + offset.y)
	    	  	      * GBUFFER_WIDTH
	    	              + int (gl_FragCoord.x) + offset.x];
	while (idx != -1)
	{
		depth = fragments[idx].depth;
		mind = min (mind, depth);
		maxd = max (maxd, depth);
		idx = fragments[idx].next;
	}

	if (mindepth == 1.0)
	   discard;

	mindepth = mind;
	maxdepth = maxd;
}
