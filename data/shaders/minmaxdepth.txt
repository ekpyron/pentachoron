/*  
 * This file is part of DRE.
 *
 * DRE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DRE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DRE.  If not, see <http://www.gnu.org/licenses/>.
 */
#version 420 core

uniform vec2 invviewport;

layout(binding = 0) uniform sampler2D depthbuffer;
layout(binding = 1) uniform isampler2D fragidx;
layout(binding = 2) uniform usamplerBuffer fraglist;

uniform uvec2 offset;

layout(location = 0) out float mindepth;
layout(location = 1) out float maxdepth;

void main (void)
{
	vec2 coord;
	float mind, maxd, depth;
	coord = invviewport * (32 * ivec2 (gl_FragCoord.xy) + offset);
	depth = texture (depthbuffer, coord).r;
	mind = depth;
	maxd = depth;
	int idx = texture (fragidx, coord).r;
	while (idx != -1)
	{
		depth = uintBitsToFloat (texelFetch (fraglist, idx * 5 + 3).r);
		mind = min (mind, depth);
		maxd = max (maxd, depth);
		idx = int (texelFetch (fraglist, idx * 5 + 4).r);
	}

	if (mindepth == 1.0)
	   discard;

	mindepth = mind;
	maxdepth = maxd;
}
