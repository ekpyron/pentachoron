/*  
 * This file is part of pentachoron.
 *
 * pentachoron is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * pentachoron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with pentachoron.  If not, see <http://www.gnu.org/licenses/>.
 */
/* #version 430 core [ specified externally ] */
/*
 * external definitions: 
 * NUM_TILES_X
 * NUM_TILES_Y
 */

uniform vec2 invviewport;

struct Light {
       vec4 pos;
       vec4 color;
       vec4 dir;
       vec4 spot, spot2;
       vec4 specular;
       vec4 attenuation;
       vec4 frustum[6];
};

readonly layout (binding = 0, std430) buffer LightBuffer {
       struct Light lights[];
};

uniform uint num_lights;


layout (binding = 0) uniform sampler2D mindepthtex;
layout (binding = 1) uniform sampler2D maxdepthtex;

layout (binding = 0) uniform atomic_uint counter[NUM_TILES_X * NUM_TILES_Y];

layout (binding = 0, size1x16) writeonly uniform uimage2D lighttex;

uniform vec4 projinfo;
uniform mat4 vmatinv;

vec3 getpos (vec3 pin)
{
	vec4 pos;
	pos.xyz = pin * 2 - 1;
	pos.w = 1;

	vec4 p;
	p.x = pos.x * projinfo.x;
	p.y = pos.y * projinfo.y;
	p.z = -pos.w;
	p.w = (pos.z * (projinfo.z - projinfo.w)
	      + pos.w * (projinfo.z + projinfo.w))
	      / (2 * projinfo.z * projinfo.w);
	pos = vmatinv * p;
	return pos.xyz / pos.w;
}

void main (void)
{
	int tile;
	ivec2 coord;
	int lightidx;

	lightidx = ((int(gl_FragCoord.y)&0x1F)<<5)
		   + (int (gl_FragCoord.x)&0x1F);

	if (lightidx >= num_lights)
		discard;

	coord.x = int (gl_FragCoord.x) >> 5;
	coord.y = int (gl_FragCoord.y) >> 5;

	tile = NUM_TILES_X * coord.y + coord.x;

	float mindepth, maxdepth;

	mindepth = texelFetch (mindepthtex, coord, 0).r;
	maxdepth = texelFetch (maxdepthtex, coord, 0).r;

	if (mindepth == 1.0)
	   discard;

	vec3 boxmin, boxmax, bsphere;
	float radius;

	boxmin = getpos (vec3 (float (coord.x) / float (NUM_TILES_X),
	       	 	       float (coord.y) / float (NUM_TILES_Y),
			       mindepth));
	boxmax = getpos (vec3 (float (coord.x + 1) / float (NUM_TILES_X),
	       	 	       float (coord.y + 1) / float (NUM_TILES_Y),
			       maxdepth));

	float dist;
	for (int i = 0; i < 6; i++)
	{
		const vec4 plane = lights[lightidx].frustum[i];

		if (dot (plane.xyz, boxmin) + plane.w > 0)
		    continue;
		if (plane.x * boxmax.x + plane.y * boxmin.y
		    + plane.z * boxmin.z + plane.w > 0)
		    continue;
		if (plane.x * boxmin.x + plane.y * boxmax.y
		    + plane.z * boxmin.z + plane.w > 0)
		    continue;
		if (plane.x * boxmax.x + plane.y * boxmax.y
		    + plane.z * boxmin.z + plane.w > 0)
		    continue;
		if (plane.x * boxmin.x + plane.y * boxmin.y
		    + plane.z * boxmax.z + plane.w > 0)
		    continue;
		if (plane.x * boxmax.x + plane.y * boxmin.y
		    + plane.z * boxmax.z + plane.w > 0)
		    continue;
		if (plane.x * boxmin.x + plane.y * boxmax.y
		    + plane.z * boxmax.z + plane.w > 0)
		    continue;
		if (dot (plane.xyz, boxmax) + plane.w > 0)
		    continue;
		discard;
	}

	uint idx = atomicCounterIncrement (counter[tile]);

	ivec2 p;

	p.x = (coord.x << 5);
	p.y = (coord.y << 5);
	p.x += int (idx)&0x1F;
	p.y += int (idx)>>5;

	imageStore (lighttex, p, uvec4 (lightidx, 0, 0, 0));
}
