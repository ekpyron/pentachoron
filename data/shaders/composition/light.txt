/*  
 * This file is part of DRE.
 *
 * DRE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DRE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DRE.  If not, see <http://www.gnu.org/licenses/>.
 */

struct Light {
       vec4 pos;
       vec4 color;
       vec4 dir;
       vec4 spot, spot2;
       vec4 specular;
       vec4 attenuation;
       vec4 frustum_l;
       vec4 frustum_r;
       vec4 frustum_b;
       vec4 frustum_t;
       vec4 frustum_n;
       vec4 frustum_f;
};

layout (binding = 0, std430) buffer LightBuffer {
       struct Light lights[];
};

uniform bool tile_based;
uniform uint num_lights;

uint GetNumLights (void)
{
	if (tile_based)
	{
		ivec2 c = ivec2 (int (gl_FragCoord.x) >> 5,
	      	  	  	 int (gl_FragCoord.y) >> 5);
		return atomicCounter (counter[NUM_TILES_X * c.y + c.x]);
	}
	else
	{
		return num_lights;
	}
}

void ReadLight (out struct Light light, in uint id)
{
	int offset;

	if (tile_based)
	{
		ivec2 p;
		p.x = int (gl_FragCoord.x) & (~0x1F);
		p.y = int (gl_FragCoord.y) & (~0x1F);
		p.x += int (id) & 0x1F;
		p.y += int (id) >> 5;
		offset = int (texelFetch (lighttex, p, 0).r);
	}
	else
	{
		offset = int (id);
	}

	light = lights[offset];
}
