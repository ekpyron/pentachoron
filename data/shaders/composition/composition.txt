/*  
 * This file is part of DRE.
 *
 * DRE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DRE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DRE.  If not, see <http://www.gnu.org/licenses/>.
 */

const vec3 luminance_factor = vec3 (0.2126, 0.7152, 0.0722);

struct Fragment {
       uint color;
       uint specular;
       uint normal;
       float depth;
       int next;
};

readonly layout (std430, binding = 3) buffer FragmentIndex {
       int fragindices[];
};

readonly layout (binding = 4, std430) buffer FragmentList {
       struct Fragment fragments[];
};

struct PixelData {
       vec4 color;
       vec4 specular;
       vec4 normal;
       float depth;
};

uniform struct {
	float threshold;
} glow;

uniform float screenlimit;
uniform float shadow_alpha;

uniform vec3 eye;

vec4 compute_pixel (in struct PixelData data, out bool issky)
{
	uint num_lights;
	vec3 pos;
	vec3 normal;
	vec3 diffuse = vec3 (0, 0, 0);
	vec3 specular = vec3 (0, 0, 0);
	vec4 pixel;
	vec3 viewdir;

	if (data.depth == 1.0f)
	{
		vec3 dir;
		dir = normalize (getskypos (vec3 (invviewport * gl_FragCoord.xy,
	      			    	    data.depth)));
		issky = true;
		return vec4 (compute_sky (dir, true), 1.0f);
	}
	issky = false;	

	struct Parameter param = parameters [int (data.specular.w * 255.0f)];

	pos = getpos (vec3 (invviewport * gl_FragCoord.xy, data.depth));
	normal = normalize (data.normal.xyz * 2 - 1);

	viewdir = normalize (eye - pos);

	{
		diffuse = dot (compute_sky (normal, false), luminance_factor)
			  * vec3 (1, 1, 1);
		vec3 lightdir = normalize (sun.direction);

		float s = ComputeSpecular (param, normal, viewdir, lightdir);

		specular = s * vec3 (1, 1, 1) * compute_sky (normal, true);
	}

	num_lights = GetNumLights ();

	for (uint i = 0; i < num_lights; i++)
	{
		struct Light light;
		ReadLight (light, i);

		vec3 lightdir = light.pos.xyz - pos.xyz;

		float dist = length (lightdir);

		if (dist > light.attenuation.w)
		   continue;
		
		lightdir /= dist;

		float attenuation;
		attenuation = 1.0 / (light.attenuation.x
			      	     + dist * light.attenuation.y
				     + dist * dist * light.attenuation.z);

		float angle = dot (normalize (light.dir.xyz),
		      	      	   -lightdir);

		if (angle < light.spot.x)
		   continue;

		if (angle < light.spot2.y)
		{
			attenuation *= (angle - light.spot.x)
				       / (light.spot2.y - light.spot.x);
		}

		attenuation *= pow (angle, light.spot.y);

		float NdotL;
		NdotL = max (dot (normal, lightdir), 0.0);

		diffuse += NdotL * attenuation * light.color.xyz;

		float s = ComputeSpecular (param, normal, viewdir, lightdir);
		specular += attenuation * s * light.specular.xyz;
	}

	specular *= data.specular.xyz;

	pixel = vec4 (data.color.xyz * diffuse, data.color.w); 
	pixel.xyz += specular * data.specular.xyz;

	if (param.reflect_factor > 0)
	{
		float factor;
		vec3 refdir = normalize (reflect (-viewdir, normal));
		factor = param.reflect_factor;
		float n = param.reflect_fresnel_n;
		vec3 refl = compute_sky (refdir, true);
		if (n != 0.0)
		{
			float k = param.reflect_fresnel_k;
			float cos_theta = dot (refdir, normal);
			float f = (n - 1) * (n - 1) + k * k
		  	    	  + 4 * n * pow (1 - cos_theta, 5);
			f /= (n + 1) * (n + 1) + k * k;
			factor *= clamp (f, 0.0f, 1.0f);
		}
		pixel.xyz =  mix (pixel.xyz, refl, factor);
	}

	float shadow = mix (1.0, compute_shadow (pos), shadow_alpha);
	pixel *= shadow;

	return pixel;
}

void UnpackFragment (out PixelData data, in uint idx)
{
	// TODO: find out why a tmp variable is needed here. Driver bug?
	uint tmp = fragments[idx].color;
	data.color = unpackUnorm4x8 (tmp);
	tmp = fragments[idx].specular;
	data.specular = unpackUnorm4x8 (tmp);
	tmp = fragments[idx].normal;
	data.normal = unpackUnorm4x8 (tmp);
	data.depth = fragments[idx].depth;
}

void main (void)
{
	struct PixelData data;
	vec4 pixel;
	vec2 coord = invviewport * gl_FragCoord.xy;

	int idx = fragindices[int (gl_FragCoord.y) * GBUFFER_WIDTH
	                      + int (gl_FragCoord.x)];
	uint num = 0;
	uint indices[MAX_DEPTH_LAYERS];

	while (idx != -1)
	{
		float d = fragments[idx].depth;
		if (num < MAX_DEPTH_LAYERS)
		{
		   num++;
		}
		else if (fragments[indices[num-1]].depth <= d)
		{
			idx = fragments[indices[idx]].next;
			continue;
		}

		uint i = num - 1;
		while (i > 0)
		{
			if (d >= fragments[indices[i - 1]].depth)
			   break;
			indices[i] = indices[i - 1];
			i--;
		}
		indices[i] = idx;
		idx = fragments[idx].next;
	}

	bool issky;

	data.color = texture (colorbuffer, coord);
	data.specular = texture (specularbuffer, coord);
	data.normal = texture (normalbuffer, coord);
	data.depth = texture (depthbuffer, coord).r;
	pixel = compute_pixel (data, issky);

	for (uint i = 0; i < num; i++)
	{
		vec4 tmp;
		idx = int (indices[num - i - 1]);
		UnpackFragment (data, idx);
		bool ignored;
		tmp = compute_pixel (data, ignored);
		pixel = mix (tmp, pixel, tmp.w);
	}

	pixel = clamp (pixel, 0, screenlimit);
	screen = pixel;

	if (!issky && dot (pixel.xyz, luminance_factor) > glow.threshold)
	{
		glowmap = pixel;
	}
	else
	{
		glowmap = vec4 (0, 0, 0, 0);
	}
}
